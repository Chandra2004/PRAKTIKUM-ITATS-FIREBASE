<?php
    require __DIR__ . '/vendor/autoload.php';

    function output($status, $message)
    {
        $statusStyle = [
            'success' => ["\033[42;30m", "✔️ "],
            'error'   => ["\033[41;37m", "❌ "],
            'info'    => ["\033[44;37m", "ℹ️   "],
            'reset'   => "\033[0m"
        ];

        if (isset($statusStyle[$status])) {
            $color = $statusStyle[$status][0];
            $icon = $statusStyle[$status][1];
            $formattedMessage = "  $icon " . strtoupper($status) . ": $message  ";
            echo $color . $formattedMessage . $statusStyle['reset'] . "\n";
        } else {
            echo $statusStyle['reset'] . "UNKNOWN STATUS: $message\n";
        }
    }

    function getInput($prompt, $default = null)
    {
        echo "$prompt" . ($default ? " [$default]: " : ": ");
        $input = trim(fgets(STDIN));
        return $input ?: $default;
    }

    function validateNamespace($namespace)
    {
        return preg_match('/^[a-zA-Z][a-zA-Z0-9\\\\]*[a-zA-Z0-9]$/', $namespace);
    }

    function validateProjectName($name)
    {
        return preg_match('/^[a-z0-9]([_.-]?[a-z0-9]+)*\/[a-z0-9](([_.]|-{1,2})?[a-z0-9]+)*$/', $name);
    }

    function parseOptions($options)
    {
        foreach ($options as $option) {
            if (strpos($option, '--class=') === 0) {
                return substr($option, 8);
            }
        }
        return null;
    }

    function getNamespaceFromComposer($directory)
    {
        $composer = json_decode(file_get_contents(__DIR__ . '/composer.json'), true);
        $psr4 = $composer['autoload']['psr-4'] ?? [];
        foreach ($psr4 as $namespace => $path) {
            if (rtrim($path, '/') === $directory) {
                return rtrim($namespace, '\\');
            }
        }
        output('error', "Namespace for directory '$directory' not found in composer.json PSR-4 configuration.");
        exit(1);
    }

    function handleMigration($className = null, $action = 'up')
    {
        $migrationDir = __DIR__ . '/database/migrations/';
        $migrationFiles = glob($migrationDir . '*.php');

        usort($migrationFiles, function ($a, $b) {
            return strcmp(basename($a), basename($b));
        });

        if ($className) {
            $migrationClass = 'Database\\Migrations\\' . $className;
            $file = $migrationDir . $className . '.php';
            if (file_exists($file)) {
                if (!class_exists($migrationClass)) {
                    output('info', "Memuat file: $file");
                    require_once $file;
                } else {
                    output('info', "Kelas $migrationClass sudah dimuat, melewati file: $file");
                }
                if (class_exists($migrationClass)) {
                    try {
                        output('info', "Menjalankan Migrasi: $className...");
                        (new $migrationClass())->$action();
                        output('success', "Migrasi $action selesai untuk $className.");
                    } catch (Throwable $e) {
                        output('error', "Error migrasi: " . $e->getMessage());
                    }
                } else {
                    output('error', "Kelas migrasi '$migrationClass' tidak ditemukan.");
                }
            } else {
                output('error', "File migrasi untuk kelas '$className' tidak ditemukan.");
            }
        } else {
            output('info', ucfirst($action) . " semua migrasi yang tersedia...");
            foreach ($migrationFiles as $file) {
                $migrationClass = 'Database\\Migrations\\Migration_' . pathinfo($file, PATHINFO_FILENAME);
                if (!class_exists($migrationClass)) {
                    output('info', "Memuat file: $file");
                    require_once $file;
                } else {
                    output('info', "Kelas $migrationClass sudah dimuat, melewati file: $file");
                }
                if (class_exists($migrationClass)) {
                    try {
                        output('info', "Menjalankan Migrasi: " . pathinfo($file, PATHINFO_FILENAME) . "...");
                        (new $migrationClass())->$action();
                        output('success', "Migrasi $action selesai untuk " . pathinfo($file, PATHINFO_FILENAME));
                    } catch (Throwable $e) {
                        output('error', "Error migrasi pada " . pathinfo($file, PATHINFO_FILENAME) . ": " . $e->getMessage());
                    }
                } else {
                    output('error', "Kelas migrasi '$migrationClass' tidak ditemukan.");
                }
            }
        }
    }

    function handleSeeder($className = null)
    {
        $seederDir = __DIR__ . '/database/seeders/';
        $seederFiles = glob($seederDir . '*.php');

        if ($className) {
            $seederClass = "Database\\Seeders\\$className";
            if (class_exists($seederClass)) {
                output('info', "Running Seeder: $className...");
                (new $seederClass())->run();
                output('success', "Seeding completed for $className.");
            } else {
                output('error', "Seeder class '$seederClass' not found.");
            }
        } else {
            output('info', "Running all available seeders...");
            foreach ($seederFiles as $file) {
                require_once $file;
                $seederClass = 'Database\\Seeders\\' . pathinfo($file, PATHINFO_FILENAME);
                if (class_exists($seederClass)) {
                    (new $seederClass())->run();
                    output('success', "Seeding completed for " . pathinfo($file, PATHINFO_FILENAME));
                } else {
                    output('error', "Seeder class '$seederClass' not found.");
                }
            }
        }
    }

    function handleServe()
    {
        output('info', "Starting development server at http://localhost:8080...");
        $routerFile = __DIR__ . '/server.php';

        if (!file_exists($routerFile)) {
            file_put_contents($routerFile, <<<PHP
        <?php
        \$path = parse_url(\$_SERVER["REQUEST_URI"], PHP_URL_PATH);
        \$file = __DIR__ . \$path;

        if (\$path !== '/' && file_exists(\$file)) {
            return false;
        }
        require_once __DIR__ . '/index.php';
        PHP);
            output('success', "server.php created.");
        }

        passthru("php -S localhost:8080 server.php");
    }

    function handleSetup()
    {
        output('info', "Setting up THE-FRAMEWORK...");

        // Get and validate project name
        $projectName = null;
        while (!$projectName) {
            $input = getInput("Enter project name (vendor/project)", "vendor/project");
            if (validateProjectName($input)) {
                $projectName = $input;
            } else {
                output('error', "Invalid project name. Use format 'vendor/project'.");
            }
        }

        $description = getInput("Enter project description", "Your THE-FRAMEWORK PHP MVC Project");
        $authorName = getInput("Enter author name", "Your Name");
        $authorEmail = getInput("Enter author email", "your.email@example.com");

        $namespace = null;
        while (!$namespace) {
            $input = getInput("Enter namespace", "App\NameProject");
            if (validateNamespace($input)) {
                $namespace = $input;
            } else {
                output('error', "Invalid namespace format.");
            }
        }

        output('info', "Updating composer.json...");
        $composer = json_decode(file_get_contents(__DIR__ . '/composer.json'), true);
        $composer['name'] = $projectName;
        $composer['description'] = $description;
        $composer['authors'] = [["name" => $authorName, "email" => $authorEmail]];
        file_put_contents(__DIR__ . '/composer.json', json_encode($composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
        output('success', "composer.json updated.");

        if (!file_exists('.env')) {
            if (file_exists('.env.example')) {
                copy('.env.example', '.env');
                output('success', "Created .env file.");
            } else {
                output('error', ".env.example not found.");
                exit(1);
            }
        }

        output('info', "Installing dependencies...");
        shell_exec('composer install');

        output('info', "Generating autoload files...");
        shell_exec('composer dump-autoload');

        output('info', "Updating namespaces...");
        shell_exec("php update-namespace.php " . escapeshellarg($namespace));
        output('success', "Namespaces updated.");

        output('info', "Generating encryption key...");
        $key = \Defuse\Crypto\Key::createNewRandomKey()->saveToAsciiSafeString();
        $envContent = file_get_contents('.env');
        $envContent = preg_replace('/^ENCRYPTION_KEY=.*$/m', "ENCRYPTION_KEY=$key", $envContent);
        file_put_contents('.env', $envContent);
        output('success', "Encryption key generated.");

        output('success', "Setup completed. Run 'php artisan migrate' and 'php artisan seed' separately to set up the database.");
    }

    function handleMakeCommand($command, $options)
    {
        $type = explode(':', $command)[1] ?? null;
        $name = $options[0] ?? null;
        $force = in_array('--force', $options);

        if (!$type || !$name) {
            output('error', "Usage: php artisan make:{controller|model|seeder|migration|middleware} Name [--force]");
            return;
        }

        $basePath = __DIR__;

        // Parse nested namespace and path
        $nameParts = explode('/', $name);
        $className = array_pop($nameParts); // Get the last part as class name
        $subNamespace = implode('\\', $nameParts); // Convert folder structure to namespace
        $subPath = implode('/', $nameParts); // Convert to path

        switch ($type) {
            case 'controller':
                $directory = "app/Http/Controllers/" . ($subPath ? "$subPath/" : '');
                $path = "$basePath/$directory{$className}.php";
                $namespace = getNamespaceFromComposer('app/Http/Controllers') . ($subNamespace ? "\\$subNamespace" : '');
                $appNamespace = getNamespaceFromComposer('app/App');
                $helpersNamespace = getNamespaceFromComposer('app') . '\\Helpers';
                $content = "<?php\n\nnamespace $namespace;\n\nuse {$appNamespace}\\{Config, Database, View, CacheManager};\nuse {$helpersNamespace}\\Helper;\nuse Exception;\n\nclass $className\n{\n    public function Index()\n    {\n        //\n    }\n}\n";
                break;

            case 'model':
                $directory = "app/Models/" . ($subPath ? "$subPath/" : '');
                $path = "$basePath/$directory{$className}.php";
                $namespace = getNamespaceFromComposer('app/Models') . ($subNamespace ? "\\$subNamespace" : '');
                $appNamespace = getNamespaceFromComposer('app/App');
                $content = "<?php\n\nnamespace $namespace;\n\nuse {$appNamespace}\\CacheManager;\nuse {$appNamespace}\\Database;\nuse {$appNamespace}\\Config;\nuse {$appNamespace}\\Logging;\nuse Defuse\\Crypto\\Crypto;\nuse Defuse\\Crypto\\Key;\n\nclass $className extends Database\n{\n    // your code here\n}\n";
                break;

            case 'seeder':
                $directory = "database/seeders/" . ($subPath ? "$subPath/" : '');
                $path = "$basePath/$directory{$className}.php";
                $namespace = getNamespaceFromComposer('database/seeders') . ($subNamespace ? "\\$subNamespace" : '');
                $appNamespace = getNamespaceFromComposer('app/App');
                $content = "<?php\n\nnamespace $namespace;\n\nuse {$appNamespace}\\Config;\nuse Defuse\\Crypto\\Crypto;\nuse Defuse\\Crypto\\Key;\nuse Faker\\Factory;\n\nclass $className\n{\n    private \$encryptionKey;\n\n    public function __construct()\n    {\n        Config::loadEnv();\n        \$keyString = Config::get('ENCRYPTION_KEY');\n        if (!\$keyString) {\n            throw new \\Exception('Encryption key not configured.');\n        }\n        \$this->encryptionKey = Key::loadFromAsciiSafeString(\$keyString);\n    }\n\n    public function run()\n    {\n        //\n    }\n}\n";

                if (file_exists($path) && !$force) {
                    output('error', "File already exists at $path. Use --force to overwrite.");
                    return;
                }
                if (!is_dir(dirname($path))) {
                    mkdir(dirname($path), 0755, true);
                }
                file_put_contents($path, $content);
                output('success', "Seeder created successfully: " . str_replace($basePath . '/', '', $path));

                $modelSeederName = str_replace('Seeder', '', $className);
                $modelSeederDirectory = "app/Models/Seeders/" . ($subPath ? "$subPath/" : '');
                $modelSeederPath = "$basePath/$modelSeederDirectory{$modelSeederName}.php";
                $modelSeederNamespace = getNamespaceFromComposer('app/Models/Seeders') . ($subNamespace ? "\\$subNamespace" : '');
                $tableName = strtolower($modelSeederName);
                $modelSeederContent = "<?php\n\nnamespace $modelSeederNamespace;\n\nuse {$appNamespace}\\Database;\n\nclass $modelSeederName\n{\n    protected static Database \$db;\n\n    public static function create(array \$data)\n    {\n        self::\$db = Database::getInstance();\n        \$columns = implode(\", \", array_keys(\$data));\n        \$placeholders = \":\" . implode(\", :\", array_keys(\$data));\n\n        \$sql = \"INSERT INTO {$tableName} (\$columns) VALUES (\$placeholders)\";\n        self::\$db->query(\$sql);\n\n        foreach (\$data as \$key => \$value) {\n            self::\$db->bind(\":\$key\", \$value);\n        }\n\n        return self::\$db->execute();\n    }\n}\n";

                if (file_exists($modelSeederPath) && !$force) {
                    output('error', "File already exists at $modelSeederPath. Use --force to overwrite.");
                    return;
                }
                if (!is_dir(dirname($modelSeederPath))) {
                    mkdir(dirname($modelSeederPath), 0755, true);
                }
                file_put_contents($modelSeederPath, $modelSeederContent);
                output('success', "Model seeder created successfully: " . str_replace($basePath . '/', '', $modelSeederPath));
                return;

            case 'migration':
                $timestamp = date('Y_m_d_His');
                $migrationFileName = "{$timestamp}_{$className}";
                $directory = "database/migrations/" . ($subPath ? "$subPath/" : '');
                $path = "$basePath/$directory{$migrationFileName}.php";
                $namespace = getNamespaceFromComposer('database/migrations') . ($subNamespace ? "\\$subNamespace" : '');
                $appNamespace = getNamespaceFromComposer('app/App');
                $tableName = strtolower(preg_replace('/(?<!^)[A-Z]/', '_$0', str_replace(['Create', 'Table'], '', $className)));
                $content = "<?php\n\nnamespace $namespace;\n\nuse {$appNamespace}\\Schema;\n\nclass Migration_{$migrationFileName}\n{\n    public function up()\n    {\n        Schema::create('{$tableName}', function (\$table) {\n            // Define columns\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('{$tableName}');\n    }\n}\n";
                break;

            case 'middleware':
                $directory = "app/Middleware/" . ($subPath ? "$subPath/" : '');
                $path = "$basePath/$directory{$className}.php";
                $namespace = getNamespaceFromComposer('app/Middleware') . ($subNamespace ? "\\$subNamespace" : '');
                $middlewareNamespace = getNamespaceFromComposer('app/Middleware');
                $content = "<?php\n\nnamespace $namespace;\n\nuse {$middlewareNamespace}\\Middleware;\n\nclass $className implements Middleware\n{\n    public function before()\n    {\n        //\n    }\n}\n";
                break;

            default:
                output('error', "Unknown make type: $type");
                return;
        }

        if (file_exists($path) && !$force) {
            output('error', "File already exists at $path. Use --force to overwrite.");
            return;
        }

        if (!is_dir(dirname($path))) {
            mkdir(dirname($path), 0755, true);
        }

        file_put_contents($path, $content);
        output('success', ucfirst($type) . " created successfully: " . str_replace($basePath . '/', '', $path));
    }

    function handleGenerateAppKey()
    {
        output('info', 'Generating APP_KEY...');

        $newKey = bin2hex(random_bytes(32));
        $envFile = __DIR__ . '/.env';

        if (!file_exists($envFile)) {
            output('error', ".env file not found.");
            return;
        }

        $envContent = file_get_contents($envFile);

        if (preg_match('/^APP_KEY=.*/m', $envContent)) {
            $envContent = preg_replace('/^APP_KEY=.*/m', "APP_KEY=$newKey", $envContent);
            output('info', 'APP_KEY updated.');
        } else {
            $envContent .= "\nAPP_KEY=$newKey";
            output('info', 'APP_KEY added.');
        }

        file_put_contents($envFile, $envContent);
        output('success', 'APP_KEY generated: ' . $newKey);
    }

    // Mulai parsing command
    $command = $argv[1] ?? null;
    $options = array_slice($argv, 2);
    $className = parseOptions($options);

    switch (true) {
        case $command === 'migrate':
            handleMigration($className);
            break;

        case $command === 'rollback':
            handleMigration($className, 'down');
            break;

        case $command === 'seed':
            handleSeeder($className);
            break;

        case $command === 'migrate:refresh':
            output('info', "Refreshing migrations...");
            handleMigration($className, 'down');
            handleMigration($className, 'up');
            break;

        case $command === 'migrate:fresh':
            output('info', "Dropping all tables and re-running migrations with seeding...");
            handleMigration(null, 'down');
            handleSeeder();
            break;

        case $command === 'serve':
            handleServe();
            break;

        case $command === 'setup':
            handleSetup();
            break;

        case $command === 'key:generate':
            handleGenerateAppKey();
            break;

        case str_starts_with($command, 'make:'):
            handleMakeCommand($command, $options);
            break;

        default:
            output('error', "Command not recognized. Available commands:\n" .
                "- setup\n" .
                "- serve\n" .
                "- migrate [--class=ClassName]\n" .
                "- rollback [--class=ClassName]\n" .
                "- seed [--class=ClassName]\n" .
                "- migrate:refresh\n" .
                "- migrate:fresh\n" .
                "- make:controller Name\n" .
                "- make:model Name\n" .
                "- make:seeder Name\n" .
                "- make:migration Name\n" .
                "- make:middleware Name\n" .
                "- key:generate");
            break;
    }
?>